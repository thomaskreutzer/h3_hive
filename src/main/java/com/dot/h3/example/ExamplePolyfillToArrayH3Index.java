package com.dot.h3.example;

import java.io.IOException;

import org.apache.hadoop.hive.ql.metadata.HiveException;
import org.apache.hadoop.hive.ql.udf.generic.GenericUDF.DeferredJavaObject;
import org.apache.hadoop.hive.ql.udf.generic.GenericUDF.DeferredObject;
import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;

import com.dot.h3.exceptions.H3InstantiationException;
import com.dot.h3.hive.udf.PolyfillToArrayH3Index;

public class ExamplePolyfillToArrayH3Index {
	
	public static void main(String[] args) throws HiveException, IOException, H3InstantiationException {
		ExamplePolyfillToArrayH3Index t = new ExamplePolyfillToArrayH3Index();
		t.testConst();
	}
	

	public void testConst() throws HiveException, IOException, H3InstantiationException {

		// Create Instance of our class
		PolyfillToArrayH3Index udf = new PolyfillToArrayH3Index();
		
		
		Text poly = new Text("POLYGON ((-73.84792754846789 40.87135052695795, -73.84725285523005 40.87099534491218, -73.84699414413883 40.87086118089499, -73.84640907093288 40.87056259385717, -73.84609097782088 40.87039806483623, -73.84578288171232 40.87023598881527, -73.84517397349802 40.86992299077551, -73.84487878139372 40.86976879975573, -73.84442274323322 40.86953059172512, -73.84423287616608 40.86942864271187, -73.84358722093859 40.86909592966943, -73.84315856078756 40.86887155864066, -73.84280584066329 40.86868904561728, -73.84240769952316 40.86848303659101, -73.84185327032813 40.86820021855516, -73.84122503110636 40.86786644351193, -73.84064505290171 40.86756246847288, -73.83974373858425 40.86709622341329, -73.83954616151466 40.86699503040044, -73.83922225840088 40.86682913237939, -73.83875363923548 40.86658106934733, -73.83784520591519 40.86610748028662, -73.83697161460722 40.86565142822804, -73.83678964654312 40.86555419821546, -73.83618741733031 40.86523239117364, -73.83578577018892 40.86502430314705, -73.83162148070991 40.86266766683222, -73.83152104367416 40.86260596082362, -73.83089469844981 40.86222114077046, -73.83012156119185 40.86205757376546, -73.82972754905956 40.86196103676043, -73.82951032798312 40.86184950474614, -73.82924229688447 40.86164015971467, -73.82912069183806 40.86151826869504, -73.8284210355786 40.86094023160664, -73.82834487455165 40.86090031760148, -73.82847486758361 40.86073964456556, -73.82882118167755 40.86045740449831, -73.82945295585287 40.86000886038855, -73.82961091889692 40.85989671236111, -73.8297385979331 40.85981802634124, -73.82987628797312 40.85974871132293, -73.83002215701622 40.8596898003063, -73.83017409506212 40.85964204529174, -73.83103481032062 40.85935132520484, -73.83190765158415 40.85907849012094, -73.83308192193702 40.8586873100035, -73.83348839705839 40.85853778595998, -73.83437848532329 40.85819913986268, -73.83533512860831 40.85783959175902, -73.83629013689324 40.85748521165639, -73.83682058805117 40.85728509959871, -73.83724229419138 40.85736561359965, -73.83817762450059 40.85751601459645, -73.83911256980956 40.85766619159297, -73.84004754711839 40.85781455958927, -73.84097285142384 40.85795736958484, -73.84191219273389 40.85809982257982, -73.84329693719012 40.85829866657023, -73.84458853461379 40.85845410055545, -73.84552601192016 40.85854677754072, -73.84645994722577 40.85864466452716, -73.84739887652967 40.85869083650338, -73.84833849783222 40.85871013847428, -73.84931034214492 40.8587257934433, -73.85028375545342 40.85866555639751, -73.85123007775208 40.85858413434842, -73.85217478705032 40.85850744630045, -73.85311088734541 40.85841808825018, -73.85405564764311 40.85833202120025, -73.85585496821088 40.85818005510768, -73.85601578826181 40.85816647009933, -73.85663915645932 40.85812746206991, -73.85735460678546 40.85971989635601, -73.85739622981542 40.85999239340777, -73.85746385186401 40.86043510249192, -73.85747360587124 40.86050396750502, -73.85748026687627 40.86055099151395, -73.85752365290875 40.86085727157226, -73.85753132791454 40.86091145858258, -73.85756823694227 40.86117201363219, -73.8576010169681 40.86142667968083, -73.85761067697585 40.86150173169512, -73.85767225802475 40.86198016378649, -73.85768026603098 40.86204236879834, -73.85769322704131 40.86214306381753, -73.85769983204656 40.86219437182734, -73.85770693805213 40.86224957583787, -73.85771169405582 40.86228652084488, -73.85780519813197 40.86304450798967, -73.85806239621475 40.86305065098193, -73.85844930738259 40.8637696811088, -73.85871361349726 40.86426084419546, -73.85891097858379 40.86464521726368, -73.85961422286258 40.8655210094101, -73.86055241916456 40.86553798638064, -73.8615641524903 40.86555775534905, -73.86154380952053 40.86616191446777, -73.8615038775926 40.8675597247422, -73.86149967260532 40.86779050778748, -73.86143525069532 40.86961176014537, -73.86138065278308 40.87134480448582, -73.860367393457 40.8713269145178, -73.85942821615474 40.87130898954719, -73.85848872785222 40.8712923525768, -73.85754995455011 40.87127461060626, -73.85661523524928 40.87125845963583, -73.85655259233737 40.87303872198572, -73.85651433439726 40.87422608621898, -73.85577193414481 40.87399200619925, -73.855518994059 40.87391224919248, -73.85450946071548 40.87358923516474, -73.8536377974187 40.87330889214058, -73.85357769439801 40.8732843141378, -73.85265892808587 40.87300048011462, -73.85171128176405 40.87270575209021, -73.85108604255103 40.87250108407216, -73.85079124145067 40.87240458506359, -73.8498778601398 40.87211017403806, -73.84859816870309 40.87167907799859, -73.84792754846789 40.87135052695795))");
		int res = 9;
		
		
		IntWritable iwRes = new IntWritable(res);

		
		ObjectInspector valueOI0 = PrimitiveObjectInspectorFactory.getPrimitiveWritableConstantObjectInspector(TypeInfoFactory.stringTypeInfo, poly);
		ObjectInspector valueOI1 = PrimitiveObjectInspectorFactory.getPrimitiveWritableConstantObjectInspector(TypeInfoFactory.stringTypeInfo, null);
		ObjectInspector valueOI2 = PrimitiveObjectInspectorFactory.getPrimitiveWritableConstantObjectInspector(TypeInfoFactory.intTypeInfo, iwRes);
		
		
		ObjectInspector[] oiArgs0 = { valueOI0, valueOI1, valueOI2 };
		//Test first call
		udf.initialize(oiArgs0);
		DeferredObject valueObj0 = new DeferredJavaObject(poly);
		DeferredObject valueObj1 = new DeferredJavaObject(null);
		DeferredObject valueObj2 = new DeferredJavaObject(iwRes);
		DeferredObject[] doArgs0 = { valueObj0, valueObj1, valueObj2 };
		System.out.println(udf.evaluate(doArgs0));

		udf.close();
	}
	
	
}
